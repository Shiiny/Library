<?php

namespace Shiny\AppBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{
    public function getBooksWithCategorie()
    {
        $query = $this->createQueryBuilder('b');
        $query
            ->leftJoin('b.category', 'c')
            ->addSelect('c');

        return $query;
    }

    public function getBooksComplet()
    {
        $query = $this->getBooksWithCategorie()
            ->leftJoin('b.author', 'a')
            ->addSelect('a')
            ->getQuery();

        return $query->getResult();
    }

    public function getFromAuthor($name)
    {
        $query = $this->getBooksWithCategorie()
            ->leftJoin('b.author', 'a')
            ->addSelect('a')
            ->where('a.nameComplet LIKE :name')
            ->setParameter('name', $name)
            ->getQuery();

        return $query->getResult();

    }

    public function findAllBooksWithPaginate($currentPage, $limite)
    {
        $query = $this->getBooksWithCategorie()
            ->leftJoin('b.author', 'a')
            ->addSelect('a')
            ->setFirstResult(($currentPage -1) * $limite)
            ->setMaxResults($limite);

        return new Paginator($query, true);
    }

    public function getLastBooks($limite)
    {
        $query = $this->getBooksWithCategorie()
            ->orderBy('b.id', 'DESC')
            ->setMaxResults($limite)
            ->getQuery();

        return $query->getResult();
    }

    public function getSearch($search)
    {
        $query = $this->getBooksWithCategorie()
            ->leftJoin('b.author', 'a')
            ->addSelect('a')
            ->where(
                'b.title LIKE :variable 
                OR c.name LIKE :variable 
                OR a.firstName LIKE :variable 
                OR a.lastName LIKE :variable 
                OR b.yearBook LIKE :variable  
                OR b.content LIKE :variable ')
            ->setParameter('variable', '%'.$search.'%');

        return $query;
    }

    public function countBySearch($search)
    {
        $query = $this->getSearch($search)
            ->select('COUNT(b)')
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    public function getSearchWithPaginate($search, $currentPage, $limite)
    {
        $query = $this->getSearch($search)
            ->orderBy('b.updatedAt', 'DESC')
            ->setFirstResult(($currentPage -1) * $limite)
            ->setMaxResults($limite);
        return new Paginator($query, true);
    }
}
